
Topics:

1.Typescript
2.Reactive Programming using Rxjs
3.Angular

Lab:
1.node.js
2.vs code


                                           TypeScript 
//////////////////////////////////////////////////////////////////////////////////////////////

What is typescript?

 Typescript is object oriented and functional style programming language.
 Typescript that scales javascript.
 scaling is nothing but expanding features.
 Typescript is super set of Javascript.

What is Javascript?

 -Javascript is programming language.


Styles of programming language
 -Object oriented
 -Procedure oriented
 -Functional oriented
 -Event driven

Some languages designed with single style - c++,java,C#,c
Some languages designed with multiple styles (hybrid) - Javascript,java 8,C#,Scala,Groovy,Kotiln....

"Javascript is Object based,functional Style,Event driven programming language."


Object based vs Object oriented:
...............................

Object Oriented Principles:
...........................

1.Abstraction
2.Encapsulation
3.Hierarchy
4.Typing
5.Modularity
----------------------
6.Concurrency
7.Persistency

if any language follows the first 5 prinicples 100% , those languages are called object
oriented programming.


if any language  does not follow the first 5 prinicples 100% or if follwing paritally , those languages are called object based programming.


functional pure vs style:

-if any language follows 100% functional programming principles those languages are called
"purely functional",if not functional style.


Javascript features:

 -Typing
     Dynamic typed language / weak typed language -----javascript
        The type of variable is not verified during compile time, runtime verfication.

     var x ="hello"
      x=10;

     Static typed language/ Strongly typed language -  c,c++,c#,java......
       The type of variable is verified during compile time.

eg:
  int a =100
  int a ="hello"; invalid ;compile time error.

  var/let/const a =10;
  a="hello" ;valid

Think: why js was designed to be dynamic typed?


Drawbacks of dynamic typing:
    -We cant build enterprise consistent application.

 -Object based 
    if we  want to design , object oriented system in js not possible.

Why javascript:
  Javascript was created for process html pages.

1989 - Web Project was started    ----------Sun created Java

1990 -  The first webserver,Browser was created

1994 - Netscap started

1995 - The first netscap navigator came to access web pages 

1996 - Netscap decided to put java inside web browser.

static web page- before netscap
dynamic web page -netscap

----Static web----- only hand coded html pages.

1996 - CREATED Dynamic web : how to work with databases
     - CGI - C,perl.
 J2EE- Servlets,JSP
 MS  - ASP
 OPEN SOURCE - PHP.


Why javascript:
  Javascript was created for process html pages.

1989 - Web Project was started    -------Sun created Java

1990 -  The first webserver,Browser was created

1994 - Netscap started

1995 - The first netscap navigator came to access web pages 

1996 - Netscap decided to put java inside web browser.

static web page- before netscap
dynamic web page -netscap

----Static web----- only hand coded html pages.

1996 - CREATED Dynamic web : how to work with databases
     - CGI - C,perl.
 J2EE- Servlets,JSP
 MS  - ASP
 OPEN SOURCE - PHP.

 Server side web : create html pages on fly by including data from databases.

Netscap decided to build client side web technoloy- once html is rendered into web browser
how to change that html onfly. 

Netscap decided to create a new programming language, who recurited Brendan Eich
,the programmer , asked to create new programming language for netscap navigator.

-Objective of Project

-It should be like java but it should not be java -light weight - scripting
-deadline is 10 days.

Time line:

1.javascript project started 1995
1.first name of the language was "Mocha"
2.language was renamed to "Live Script" -1996
3.language was renamed to "java Script" -1996

After language ready, which was submitted to standard body "ECMA international"

1996---1997 : JS 1.0 =>ES 1.0

1997- 1998 :  ES 2.0: It did not come

1999 :  ES 3

2007 : ES 4

2008 : ES 5

2012-2015 : ES 6

2016  ONWARDS : es 7,es 8, ......


////////////////////////////////////////////////////////////////////////////////////////////
				Object oriented Javascript
.............................................................................................

Fundamentally js is object based,type less language, then it is difficult to build object oriented systems.

in order to create better javascript, 2009, The project was started to make javascript looks like other object oriented langugages.

  - classes,interfaces,modules.... : Coffee script (intension was to introduce object oriented features like classes,interfaces).

Coffee script was the programming language. used to add classes,interfaces into js.

YOu write code in coffeescript

  Employee.coffee

class Employee {

}
compiler - coffee Employee.coffe
|
Employee.js - compiled code -pure javascript 
|
run on browser


Coffee script had issues still - Type system- No strongly typed.
.............................................................................................
				
..........................................................................................

..........................................................................................

2010, Microsoft started project to create object oriented javascript using C#

Objective of MS Project:

 -Add Type System - Strong Typing
 -Classes
 -Modules
 -interfaces
 -encapulation keywords
 .......
C# ---compiler------plain javascript.

MS Failed to port this project to public because

Problems with C#
 1.PORTABLITY.
 2.COMPLEXITY
.............................................................................................

2012 - ECMA released new javascript spec (ES 6) in which They introduced
  
   - classes
   - let 
   - const
   - advanced object literals
   - Promises
  etc..........

MS decided to rewrite Typed Javascript project based "ECMA 6 Standards".

MS Started redesigning the whole project, target ecma 6 as base language.

{ES 6 + Static Typing + added new extra fetures} => The brith of Typescript.


Arch of TS:

					
				      TS language
					    |
					  ES 6
					    |
					  ES 5


Typescript----compile----Plain javascript

Typescript is strongly typed, object oriented  javascript.

Now you can use type script to build better object oriented systems using javascript.

TS is not compititor or replacer for javascript but it complements js.

/////////////////////////////////////////////////////////////////////////////////////////

Type scrit is a typed superset of javascript that compiles to plain javascript

                  any browser,any host, any os, any device

///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
				Project Setup
............................................................................................

Lab:

Create Ts Project.
How to write ts programs
How to compile ts programs
How to run compiled ts programs


mkdir tsapps
C:C:\session\ibm\2021\july\ng>mkdir tsapps

create package.json file

>npm init

install typescript compiler

>npm install typescript --save-dev


create source dir

>mkdir src
..............................................................................................
					Type script compiler 
..............................................................................................

npm install typescript --save-dev


create source dir

>mkdir src

create ts programs - fileName.ts

src/index.ts

console.log("hello")

compile ts program

-add compiler config

package.json

 "compile": "tsc src/index.ts"

tsc-compiler name

>npm run compile

-generates js file

How to test ?

-on node and also browser

->on node
C:\session\ibm\2021\may\angular\tsapps>node src/index.js
Hello Type script!!!

->on browser

lanuch webbrowser and see console

///////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////

Typescript compiler(Transpiler): 
   Transpiler means source code to source code conversion -  ts -js

syntax

  tsc --compileroptions filename.ts

compiler options can be supplied in line or in a file(tsconfig.json)

Use case:

Separate source code and compiled code into different directories.

Use case:

Separate sourcode and compiled code into different directories.

source code
 src
   -index.ts

 build
    -index.js

how to tell the compiler to place compiled code into build folder.

compiler options:

 syntax

  tsc --compileroptions filename

  tsc --outDir build   src/index.ts

package.json
{
  "name": "mytsapps",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "compile" : "tsc --outDir build   src/index.ts"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "typescript": "^3.9.5"
  }
}

index.html
<body>
    <h1>Typescript apps</h1>
    <script src="build/index.js"></script>
</body>

node build/index.js

/////////////////////////////////////////////////////////////////////////////////////////////

Use case: if i write code ,every time i need to compile program mannually how to avoid that.

 we compiler option 
   --watch

 "scripts": {
    "build" : "tsc --watch --outDir build   src/index.ts"
  }

/////////////////////////////////////////////////////////////////////////////////////////////



what if i want to add more and more compiler options


tsc --watch --outDir build  --options --options  src/index.ts
  
 This is not scaleable, and maintainable. , if configuration grows.

Solution : 
 we need to create simple ts config file where you can place all configurations.

create file called
 tsconfig.json outside src folder, where we can tell all compiler options

tsconfig.json
{
    "compilerOptions": {
        "outDir": "build",
        "watch": true
    },
    "exclude": [
        "node_modules"
    ],
    "files": [
        "src/index.ts"
    ]
}

package.json
{
  "name": "tsapps",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "compile" : "tsc"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "typescript": "^4.3.5"
  }
}
..............................................................................................
			Type script Programming concepts
.............................................................................................

1.ES 6 core concepts.
  variable declarations - let,const keywords
  literals -values
3.Type system

4.functions

5.Object oriented programming

6.Decroaters - Annonations


ES 6 core concepts:

Variable delcaration;

var - es 5
let  - es6 
const - es6

var is not block scoped and let and const is block scoped.

In ES6 APPS  let and const are recommended.

The problems with ES 6:

When es6 was introduced, the node and browsers vendors were not ready to accept
es6 keywords

let ,const never work in older node and browsers.

that time browers were supported only ES 5 version of js.

browsers were not ready that time, but develoers felt,and supported lot on es6.

Then how to run es 6 code on browsers which dont support.

The birth of "Transpilers"  : a special compilers which converts es6 to es5,

developer write code in es6 ---->transpiler-->es 5

Type script code is written based on ES 6 code only.

eg: babel.js 
 higer version -to lower version

eg : tsc
 es6 to es5
 +
 type verification

         "ts compiler by default converts es6 code into es5."

let---------var

{
    "compilerOptions": {
        "outDir": "build",
        "watch": true,
        "target" :"ES6"
    },
    "exclude": [
        "node_modules"
    ],
    "files": [
        "src/index.ts"
    ]
}


Literals:
 since js is dynamic typed, types of the variable is identified during runtime based on literal(values)

1.number
2.string
3.boolean
4.undefined
5.NaN
6.infinity
7.null
8.function
9.object


1.strings:

1.16 bit unicode charaters.

2.strings can be declared inside  "" or ''  or ``(back-tick) es 6 feature
   "" : inspired from java and c++
   '' : js specific notation.


//strings:
let firstName = "Subramanian";
let lastName = 'Murugan'
console.log("Name " + firstName  + " " + lastName);
console.log("Name " , firstName  , " " , lastName);
//Template literals and string interpolation
console.log(`Name ${firstName} ${lastName}`);
let title = 'IBM'
let htmlPage =`
    <html>
      <head>
       <title>
          ${title}
       </title>
     </head>
     <body>
      <h1>Welcome</h1>
     </body>
     </html>
`;
console.log(htmlPage);



Numbers:

1.number size is 64 bit by default aka double.
2.It is IEEE 754 Standard.

No int ,long,float,double only one type - number type - 


let a = 10;
let b = 20;
let c = a * b;
console.log(`A ${a} b${b} result ${c}`)


Booleans:

1.represents true or false 
2.1 bit value.

//booleans 
let isValid = true;
let isEnabled = false;


//undefined:
undefined:
..........
It is value, assigned to a variable, if no valid literal is assigned.


let firstName;
let price;
let qty;
console.log(`First Name ${firstName}`);
console.log(`price ${price} ${qty}`);


1.NaN :Not a Number 

Not a Number but is number.
NaN represents error code.
NaN error code will come due to "numerical compuation failures".

Note:

 if you get NaN as out put, it is danger/toxic , it is runtime error, you need to fix.

When NaN will come?

1.if we do computation against undefined.

let price; //undefined
let qty; //undefined

let totalPrice = price * qty;
console.log(`Total price ${totalPrice}`)

2.During type conversion -  string number conversion.

types of Type conversion

1.implicit Type conversion
 js automatically converts string to number
2.explicit Type conversion
 js uses conversion utility apis to convert string to number.

let price; //undefined
let qty; //undefined

let totalPrice = price * qty;
console.log(`Total price ${totalPrice}`)
//type conversion

//implicit conversion : conversion is taken automatically

let a:any ="10"; // a is string but value is 10
let b = 100; // a is number and value is 100
let c = a * b;
console.log(c);
//Explicit conversion
let d =  parseFloat(a) * b;
console.log(c);

//Explicit conversion using  + operator
//+a means here convert a's string value into number
let f =  +a * b;
console.log(f);

//NaN and type conversion

let myvar:any="$10"; //NaN because $ is special character.
let res= myvar *100;
console.log(res);
..........................................

Infinity: div/0

let a =100;
let b = a /0;
console.log(b)
..............................................................................................
Advanced Boolean:
................


What can be true or false?

decision making : if..else

in javascript is every thing is true execept the following values 

Falsy values

 * 
 *  1.boolean false
 *  2.Empty string "" ,''
 *  3.0
 *  4.undefined
 *  5.NaN
 *  6.null
 */

let isActive = true;

if (isActive) {
    console.log('Active')
} else {
    console.log('inactive')
}
let firstName = ""
if (firstName) {
    console.log('Name is Present')
} else {
    console.log('Name is not  Present')
}
let start = 0;
if (start) {
    console.log('start')
} else {
    console.log('no start')
}

let total;
if (total) {
    console.log('total found')
} else {
    console.log('total not found')
}
let value = 100 * total;
if (value) {
    console.log('value found')
} else {
    console.log('value not found')
}
value = 100 / 0;
if (value) {
    console.log('value found -infinity')
} else {
    console.log('value not found -infinity')
}
............................................................................................
				 Type systems
............................................................................................

JS Types:
 Java script has type system, but theses are runtime types

1.string
2.number - NaN,infinity
3.undefined
4.boolean
5.function
6.object - null,object

typeof operator is used to know the runtime type of a variable.
typeof operator returns the type name in smaller case. eg "string,number,undefined,booelean"

//type of operator

let firstName = "Subramanian";
let lastName = 'Murugan'
//console.log("First Name" + firstName);
console.log(`First Name ${firstName} ${lastName}`);
let title = 'IBM'
let htmlPage = `
    <html>
      <head>
       <title>
          ${title}
       </title>
     </head>
     <body>
      <h1>Welcome</h1>
     </body>
     </html>
`;
console.log(htmlPage);

//Numbers 
let a = 100;
let b = 200;

//booleans 
let isValid = true;
let isEnabled = false;

//undefined
let price;
let qty;
console.log(`price ${price} ${qty}`);

//NaN ; it is error code , will come during numerical computation

let totalPrice = price * 1000;
console.log(`Total Price ${totalPrice}`)

//type conversion
let count = "$10" //string
let totalCount = parseInt(count) * 10;
console.log(totalCount)

//infinity
//div by 0
let newprice = 1000;
let avgPrice = newprice / 0;
//Avg Price Infinity
console.log(`Avg Price ${avgPrice}`);

//typeof operator ; tells the type of variable

console.log(`First Name Type ${typeof firstName}`) // string
console.log(`a Type ${typeof a}`) // number
console.log(`totalPrice(NaN) ${typeof totalPrice}`) // number
console.log(`avgPrice(Infinity) ${typeof avgPrice}`) // number
console.log(`isValid Type ${typeof isValid}`) // boolean
console.log(`price(undefined) ${typeof price}`) // undefined
.............................................................................................
                                 Typescript type System
..............................................................................................

Type script types are meant for compilation only.

if any type viloation happens, then typescript compiler gives error, so that we can fix during development cycle itself.

Type script brings strong typing/static typing to javascript.

Type annotations:
  types

Type script offers the follow type annotations

primitive datatypes
1.string
2.number
3.boolean

Object types:

Object
Array
Enum

Other types
void
any
unknown
Function


Syntax  of strongly typed

var/let/const variable:type = literal

int a =10;

a = "hello" ;;compiler will throw error : compile time vertification.

//string 

let firstName: string = "Hello";
let lastName:string =100

[12:37:50 pm] File change detected. Starting incremental compilation...

src/index.ts:4:5 - error TS2322: Type 'number' is not assignable to type 'string'.

4 let lastName:string =100;
      ~~~~~~~~

[12:37:51 pm] Found 1 error. Watching for file changes.


.........................................................................................

Basic types:

//string
let firstName: string = "Subramanian"
//number
let age: number = 41;
//boolean
let isValid: boolean = true;

//if you reinitalize the variable

//firstName =100; //error here
.............................................................................................


















